/**
 You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
 - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
 - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

 Each todo has a title and a description. The title is a string and the description is a string.
 Each todo should also get an unique autogenerated id every time it is created
 The expected API endpoints are defined below,
 1.GET /todos - Retrieve all todo items
 Description: Returns a list of all todo items.
 Response: 200 OK with an array of todo items in JSON format.
 Example: GET http://localhost:3000/todos

 2.GET /todos/:id - Retrieve a specific todo item by ID
 Description: Returns a specific todo item identified by its ID.
 Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 Example: GET http://localhost:3000/todos/123

 3. POST /todos - Create a new todo item
 Description: Creates a new todo item.
 Request Body: JSON object representing the todo item.
 Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 Example: POST http://localhost:3000/todos
 Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

 4. PUT /todos/:id - Update an existing todo item by ID
 Description: Updates an existing todo item identified by its ID.
 Request Body: JSON object representing the updated todo item.
 Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 Example: PUT http://localhost:3000/todos/123
 Request Body: { "title": "Buy groceries", "completed": true }

 5. DELETE /todos/:id - Delete a todo item by ID
 Description: Deletes a todo item identified by its ID.
 Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 Example: DELETE http://localhost:3000/todos/123

 - For any other route not defined in the server return 404

 Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const {v4: uuidv4} = require('uuid');
const fs = require('fs');
const path = require('path');

// Example: Generate a random UUID
// const randomUuid = uuidv4();
// console.log(randomUuid);


const app = express();

app.use(bodyParser.json());
//Retrive todos on load
let todos = [];
// const testodos = [{
//     id: '1',
//     title: 'Meditation',
//     completed: false,
//     description: 'Do what is needed to be done Meditate on it.'
// },
//     {
//         id: '2',
//         title: 'Writing',
//         completed: false,
//         description: 'Write the hell out of your thoughts'
//     }
// ];

fs.readFile(path.join(__dirname +'/save/saved.txt'), 'utf8', (err, data) => {
    if (err) {
        console.error('Error reading file:', err);
    } else {
        // Parse the JSON data back to an array
        todos = JSON.parse(data);
        // Do something with the loadedTodos array
        console.log('Loaded todos:', todos);
    }
});



//Save todos in a file
function saveToDos(){
    const saveData = JSON.stringify(todos);
    fs.writeFile(path.join(__dirname + '/save/saved.txt') ,saveData ,'utf-8', (err)=>{
        if(err){
            console.log(err);
        }else{
            console.log("Data Saved");
        }
    });
}

app.get('/todos', (req, res) => {
    res.status(200).send(JSON.stringify(todos));
});
app.get('/todos/:id', (req, res) => {
    const {id} = req.params;
    const todo = todos.find(todo => todo.id === id);
    if (todo) {
        res.status(200).send(todo);
    } else {
        res.status(404).send({error: 'Todo not found'});
    }

});
app.post('/todos', (req, res) => {
    const {title, description, completed} = req.body;
    if (!title || !description) {
        res.status(404).send({error: "Title Not found!"});
    }
    const id = uuidv4();
    console.log(id);
    const todo = {
        "id": id,
        "title": title,
        "completed": completed,
        "description": description
    };
    todos.push(todo);
    saveToDos();
    res.status(201).send({"id": id});
});
app.put('/todos/:id', (req, res) => {
    const { id }= req.params;
    const {title, completed} = req.body;
    console.log(id);
    const todo = todos.find(todo => todo.id === id);
    if (todo) {
        todo.completed = completed;
        todo.title = title;
        console.log(todos);
        res.status(200).send({result: `updated to do with id -> ${id}`});
    } else {
        res.status(404).send({error: "404 - Not Found!"});
    }
    saveToDos();
});
app.delete('/todos/:id', (req, res) => {
    const { id }= req.params;
    const todo = todos.find(todo => todo.id === id);
    const index = todos.indexOf(todo);
    console.log(index);
    if(index > -1 ){
        todos.splice(0,1);
        console.log(todos);
        res.status(200).send({result : `Deleted todo with id -> ${id}`});
    }else{
        res.status(404).send({error: "404 - Not Found!"});
    }
    saveToDos();
});

//404 middleware
app.use((req, res, next) => {
    res.status(404).send("404 - Not Found!")
});

app.listen(3000, () => {
    console.log('Listening on port 3000');
});
module.exports = app;